#!/usr/bin/perl
# vim: ft=perl:fdm=marker:fen:et:sw=2:
use strict;
use warnings FATAL => 'all';
no warnings 'experimental';
use vars     qw($VERSION);
use autodie  qw(:all);

use utf8;
use open qw(:std :utf8);

my $APP  = 'sdorfehsctrl';
$VERSION = '0.001';

use IPC::Cmd qw(run);
use Term::ReadLine;

my @commands = qw(
  abort addhook alias banish banishrel chdir clrunmanaged cnext colon commands
  cother cprev curframe dedicate definekey delete delkmap describekey echo
  escape exchangedown exchangeleft exchangeright exchangeup exec execa execf
  fdump focusdown focuslast focusleft focusright focusup frestore fselect getenv
  getsel gravity hsplit help inext info iother iprev kill lastmsg link listhook
  meta newkmap next nextframe nextscreen number only other prev prevframe
  prevscreen prompt putsel quit ratclick rathold ratinfo ratrelinfo ratrelwarp
  ratwarp readkey redisplay redo remhook remove rename resize restart sdump
  select set setenv sfdump sfrestore shrink smove source sselect stick swap
  unalias undefinekey undo unmanage unsetenv unstick vsplit verbexec version
  vmove vrename vscreens vselect windows
);

my %settings = (
  barborder          => 1,
  barbordercolor     => 1,
  bargravity         => 1,
  barinpadding       => 1,
  barpadding         => 1,
  barsticky          => 1,
  bgcolor            => 1,
  border             => 1,
  bwcolor            => 1,
  fgcolor            => 1,
  font               => 1,
  framefmt           => 1,
  framemsgwait       => 1,
  framesels          => 1,
  fwcolor            => 1,
  gap                => 1,
  historysize        => 1,
  ignoreresizehints  => 1,
  infofmt            => 1,
  inputwidth         => 1,
  maxsizegravity     => 1,
  maxundos           => 1,
  msgwait            => 1,
  onlyborder         => 1,
  padding            => 1,
  resizefmt          => 1,
  resizeunit         => 1,
  rudeness           => 1,
  startupmessage     => 1,
  stickyfmt          => 1,
  topkmap            => 1,
  transgravity       => 1,
  vscreens           => 1,
  waitcursor         => 1,
  warp               => 1,
  winfmt             => 1,
  wingravity         => 1,
  winliststyle       => 1,
  winname            => 1,
);

# TODO return possible values for settings
my $term = Term::ReadLine->new('sdorfehsctrl');

my $attr = $term->Attribs;

$attr->{completion_function} = sub {
  my($word, $buffer, $start) = @_;
	return split(/\n/, ctrl('windows %t')) if $buffer =~ m/^windows\b/;
	return keys %settings if $buffer =~ m/^set\b/;

	return @commands;
};

$attr->{autolist}    =  0;
$attr->{maxcomplete} =  0;

$term->set_keymap($ENV{EDITOR} =~ m/vim/ ? 'vi' : 'emacs');

$term->ding;

while(1) {
  my $line = $term->readline("\e[0;38;5;166msdorfehsctrl\e[1;4m>\e[m\e[38;5;214m ");
  print "\e[m";

  if(defined $line) {
    print ctrl($line);
  }
}


sub ctrl {
  my $cmd = join(' ', @_);

  # command or setting?
  $cmd = (exists($settings{$cmd}) ? "set $cmd" : $cmd );

  my $buffer;
  eval {
    scalar run(
      command => "sdorfehs -c '$cmd'",
      verbose => $ENV{DEBUG} || 0,
      buffer  => \$buffer,
      timeout => 20,
    );
  };
  return $@ ? '' : $buffer ? $buffer : '';
}

=pod

=head1 sdorfehsctrl

A repl shell for sdorfehs with tabcompletion for commands and settings

=head1 SYNOPSIS

    $ sdorfehsctrl
        sdorfehsctrl> set<cr>                   # show settings in effect
        sdorfehsctrl> set fwcolor #ff0000       # set foreground window border color
        sdorfehsctrl> set bwcolor #ffff00       # set background window border color
        sdorfehsctrl> vselect n                 # switch to virtual desktop n
        sdorfehsctrl> windows                   # list windows
        sdorfehsctrl> alias w set winfmt %n%s%t # create a global alias

=head1 AUTHOR

  Magnus Woldrich
  CPAN ID: WOLDRICH
  m@japh.se
  japh@irc.libera.chat
  http://japh.se
  http://github.com/trapd00r

=head1 COPYRIGHT

Copyright 2022 Magnus Woldrich
